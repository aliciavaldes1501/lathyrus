sel_models_linear$model%>%
mutate(coef_intercept=coef(model)[1])
sel_models_linear%>%
mutate(coef_intercept=coef(model)[1])
sel_models_linear_coefs<-data.frame(sel_models_linear %>% tidy(model))
??tidy
library(tidyr)
sel_models_linear_coefs<-data.frame(sel_models_linear %>% tidy(model))
library(broom)
sel_models_linear_coefs<-data.frame(sel_models_linear %>% tidy(model))
sel_models_linear_coefs
sel_models_linear_coefs$sig<-ifelse(sel_models_linear_coefs$p.value<0.05,"*","")
sel_models_linear_coefs
sel_models_nonlinear_coefs<-data.frame(sel_models_nonlinear %>% tidy(model))
sel_models_nonlinear_coefs$sig<-ifelse(sel_models_nonlinear_coefs$p.value<0.05,"*","")
sel_models_linear_coefs
sel_models_nonlinear_coefs
library(car)
library(lme4)
library(lmerTest)
library(dplyr)
library(broom)
#Selection gradients accross 22 years of study
summary(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+(1|id), data = data_sel))
Anova(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+(1|id), data = data_sel),type="II")
#Estimation of selection gradients
#1
sel_models_linear<-data_sel %>%
group_by(year) %>%
do(model = lm(n_intact_seeds_rel ~ FFD_std+n_fl_std, data = .)) %>%
mutate(AIC=AIC(model))
sel_models_nonlinear<-data_sel %>%
group_by(year) %>%
do(model = lm(n_intact_seeds_rel ~ FFD_std+n_fl_std+FFD_std:n_fl_std+I(FFD_std^2)+I(n_fl_std^2), data = .)) %>%
mutate(AIC=AIC(model))
compare<-as.data.frame(cbind(sel_models_linear$AIC,sel_models_nonlinear$AIC))
names(compare)<-c("AIC_linear","AIC_nonlinear")
compare$best<-as.factor(with(compare,ifelse(AIC_linear<AIC_nonlinear,"linear","nonlinear")))
compare$year<-as.factor(c(1987:1996,2006:2017))
compare
sel_models_linear_coefs<-data.frame(sel_models_linear %>% tidy(model))
sel_models_linear_coefs$sig<-ifelse(sel_models_linear_coefs$p.value<0.05,"*","")
sel_models_nonlinear_coefs<-data.frame(sel_models_nonlinear %>% tidy(model))
sel_models_nonlinear_coefs$sig<-ifelse(sel_models_nonlinear_coefs$p.value<0.05,"*","")
sel_models_nonlinear_coefs
sel_models_linear_coefs
sel_models_nonlinear_coefs
compare
options(max.print=10000)
sel_models_nonlinear_coefs
sel_models_nonlinear_coefs
sel_models_linear_coefs
subset(sel_models_linear_coefs,term=FFD_std)[c(1,3:5)]
subset(sel_models_linear_coefs,term=FFD_std)[c(1,3:5)]
subset(sel_models_linear_coefs,term==FFD_std)[c(1,3:5)]
subset(sel_models_linear_coefs,term=FFD_std)[c(1,3:5)]
subset(sel_models_linear_coefs,term=="FFD_std")[c(1,3:5)]
subset(sel_models_linear_coefs,term=="FFD_std")[c(1,4:5)]
plot(linear_coefs$estimate, I(1/linear_coefs$std.error)) # this makes the funnel plot.
linear_coefs<-subset(sel_models_linear_coefs,term=="FFD_std")[c(1,4:5)]
linear_coefs
plot(linear_coefs$estimate, I(1/linear_coefs$std.error)) # this makes the funnel plot.
randomtest <- MCMCglmm (estimate~1, data = linear_coefs,nitt = 50000,burnin = 5000,thin = 30)
library(MCMCglmm)
randomtest <- MCMCglmm (estimate~1, data = linear_coefs,nitt = 50000,burnin = 5000,thin = 30)
#The intercept is going to estimate the average change in arrival date across all data points.
summary(randomtest)
plot(randomtest$Sol) # Fixed effects
plot(randomtest$VCV) # Random effects
randomtest <- MCMCglmm (estimate~1, data = linear_coefs,nitt = 10000)
#The intercept is going to estimate the average change in arrival date across all data points.
summary(randomtest)
plot(randomtest$Sol) # Fixed effects
plot(randomtest$VCV) # Random effects
randomtest <- MCMCglmm (estimate~1, data = linear_coefs,nitt = 60000)
#The intercept is going to estimate the average change in arrival date across all data points.
summary(randomtest)
plot(randomtest$Sol) # Fixed effects
plot(randomtest$VCV) # Random effects
a <- 1000
prior1<-list(R=list(V=diag(1),nu=0.002), #residual
G=list(G1=list(V=diag(1), nu=1, alpha.mu=0, alpha.V=diag(1)*a),#random effects
G1=list(V=diag(1), #variance matrix
nu=1, #degree of belief parameter
alpha.mu=0, #prior mean
alpha.V=diag(1)*a),#prior (co)variance matrix
G1=list(V=diag(1), nu=1, alpha.mu=0, alpha.V=diag(1)*a)))
randomprior <- MCMCglmm (estimate~1, data = linear_coefs, prior=prior1, nitt = 60000)
prior1<-list(R=list(V=diag(1),nu=0.002)))
prior1<-list(R=list(V=diag(1),nu=0.002))
randomprior <- MCMCglmm (estimate~1, data = linear_coefs, prior=prior1, nitt = 60000)
summary(randomprior)
plot(randomprior$Sol)
plot(randomprior$VCV)
rm(randomprior)
(linear_coefs$estimate, I(1/linear_coefs$std.error))
plot(linear_coefs$estimate, I(1/linear_coefs$std.error))
points(xsim, I(1/linear_coefs$std.error), col = "red") # here you can plot the data from both your simulated and real datasets and compare them
xsim <- simulate(randomtest) # reruns 100 new models, based around the same variance/covariance structures but with simulated data.
plot(linear_coefs$estimate, I(1/linear_coefs$std.error))
points(xsim, I(1/linear_coefs$std.error), col = "red") # here you can plot the data from both your simulated and real datasets and compare them
xsim
prior3<-list(R=list(V=diag(1),nu=0.002), G=list(G1=list(V=diag(1), nu=1, alpha.mu=0, alpha.V=diag(1)*a))
)
prior3<-list(R=list(V=diag(1),nu=0.002), G=list(G1=list(V=diag(1), nu=1, alpha.mu=0, alpha.V=diag(1)*a)))
prior3
randomerror3 <- MCMCglmm (estimate~1, random = ~idh(SE):units, data = linear_coefs,  prior=prior3, nitt = 60000)
randomerror3 <- MCMCglmm (estimate~1, random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 60000)
summary(randomerror3)
#The intercept is going to estimate the average change in arrival date across all data points.
summary(randomtest)
plot(randomerror3$Sol) # Fixed effects
plot(randomerror3$VCV) # Random effects
xsim<-simulate(randomerror3)
plot(linear_coefs$estimate, I(1/linear_coefs$std.error))
points(xsim, I(1/linear_coefs$std.error), col = "red") # here you can plot the data from both your simulated and real datasets and compare them
xsim<-simulate(randomerror3, 1000) # 1000 represents the number of simulations,
# and for some reason needs to be higher than the default to work in this case
hist(apply(xsim, 2, max), breaks = 30) # plot your simulation data
abline(v = max(linear_coefs$estimate), col = "red")
randomerror3 <- MCMCglmm (estimate~1, random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(randomerror3)
plot(randomerror3$Sol) # Fixed effects
plot(randomerror3$VCV) # Random effects
xsim<-simulate(randomerror3)
plot(linear_coefs$estimate, I(1/linear_coefs$std.error))
points(xsim, I(1/linear_coefs$std.error), col = "red") # here you can plot the data from both your simulated and real datasets and compare them
xsim<-simulate(randomerror3, 1000) # 1000 represents the number of simulations,
# and for some reason needs to be higher than the default to work in this case
hist(apply(xsim, 2, max), breaks = 30) # plot your simulation data
abline(v = max(linear_coefs$estimate), col = "red")
head(data_sel_agg)
names((data_sel_agg))
names(data_sel_agg)
data_sel_agg[c(1,39)]
data_sel_agg[c(1,139)]
data_sel_agg[c(1,139,216:222,236:242)]
linear_coefs
merge(linear_coefs,data_sel_agg[c(1,139,216:222,236:242)])
linear_coefs<-merge(linear_coefs,data_sel_agg[c(1,139,216:222,236:242)])
linear_coefs
linear_coefs
fixedtest <- MCMCglmm (estimate~precipitation_3, random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(fixedtest)
plot(fixedtest$Sol)
plot(fixedtest$VCV)
xsim<-simulate(fixedtest)
plot(migrationtime$Slope, I(1/migrationtime$SE))
fixedtest <- MCMCglmm (estimate~precipitation_3+FFD_mean+FFD_var+grazing+prop_pred_seeds+fr_set+seed_set+
seeds_per_fl, random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(fixedtest)
fixedtest <- MCMCglmm (estimate~precipitation_3+FFD_mean+FFD_var+grazing+prop_pred_seeds+
seeds_per_fl, random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(fixedtest)
fixedtest <- MCMCglmm (estimate~precipitation_3+FFD_var+grazing+prop_pred_seeds+seeds_per_fl,
random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(fixedtest)
fixedtest <- MCMCglmm (estimate~precipitation_3+FFD_var+grazing+seeds_per_fl,
random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(fixedtest)
fixedtest <- MCMCglmm (estimate~FFD_var+seeds_per_fl,
random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(fixedtest)
fixedtest <- MCMCglmm (estimate~seeds_per_fl,
random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(fixedtest)
library(car)
library(lme4)
library(lmerTest)
library(dplyr)
library(broom)
library(MCMCglmm)
#Selection gradients accross 22 years of study
summary(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+(1|id), data = data_sel))
Anova(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+(1|id), data = data_sel),type="II")
#Estimation of selection gradients
#1
sel_models_linear<-data_sel %>%
group_by(year) %>%
do(model = lm(n_intact_seeds_rel ~ FFD_std+n_fl_std, data = .)) %>%
mutate(AIC=AIC(model))
sel_models_nonlinear<-data_sel %>%
group_by(year) %>%
do(model = lm(n_intact_seeds_rel ~ FFD_std+n_fl_std+FFD_std:n_fl_std+I(FFD_std^2)+I(n_fl_std^2), data = .)) %>%
mutate(AIC=AIC(model))
compare<-as.data.frame(cbind(sel_models_linear$AIC,sel_models_nonlinear$AIC))
names(compare)<-c("AIC_linear","AIC_nonlinear")
compare$best<-as.factor(with(compare,ifelse(AIC_linear<AIC_nonlinear,"linear","nonlinear")))
compare$year<-as.factor(c(1987:1996,2006:2017))
compare
sel_models_linear_coefs<-data.frame(sel_models_linear %>% tidy(model))
sel_models_linear_coefs$sig<-ifelse(sel_models_linear_coefs$p.value<0.05,"*","")
sel_models_nonlinear_coefs<-data.frame(sel_models_nonlinear %>% tidy(model))
sel_models_nonlinear_coefs$sig<-ifelse(sel_models_nonlinear_coefs$p.value<0.05,"*","")
sel_models_linear_coefs
sel_models_nonlinear_coefs
#2
linear_coefs<-subset(sel_models_linear_coefs,term=="FFD_std")[c(1,4:5)]
plot(linear_coefs$estimate, I(1/linear_coefs$std.error)) # this makes the funnel plot.
randomtest <- MCMCglmm (estimate~1, data = linear_coefs,nitt = 60000)
#The intercept is going to estimate the average change in arrival date across all data points.
summary(randomtest)
plot(randomtest$Sol) # Fixed effects
plot(randomtest$VCV) # Random effects
xsim <- simulate(randomtest) # reruns 100 new models, based around the same variance/covariance structures but with simulated data.
plot(linear_coefs$estimate, I(1/linear_coefs$std.error))
points(xsim, I(1/linear_coefs$std.error), col = "red") # here you can plot the data from both your simulated and real datasets and compare them
prior3<-list(R=list(V=diag(1),nu=0.002), G=list(G1=list(V=diag(1), nu=1, alpha.mu=0, alpha.V=diag(1)*a)))
randomerror3 <- MCMCglmm (estimate~1, random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(randomerror3)
plot(randomerror3$Sol) # Fixed effects
plot(randomerror3$VCV) # Random effects
xsim<-simulate(randomerror3)
plot(linear_coefs$estimate, I(1/linear_coefs$std.error))
points(xsim, I(1/linear_coefs$std.error), col = "red") # here you can plot the data from both your simulated and real datasets and compare them
xsim<-simulate(randomerror3, 1000) # 1000 represents the number of simulations,
# and for some reason needs to be higher than the default to work in this case
hist(apply(xsim, 2, max), breaks = 30) # plot your simulation data
abline(v = max(linear_coefs$estimate), col = "red")
linear_coefs
summary(randomerror3)
plot(randomerror3$Sol) # Fixed effects
#Selection gradients accross 22 years of study
summary(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+(1|id), data = data_sel))
Anova(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+(1|id), data = data_sel),type="II")
summary(lm(n_intact_seeds_rel ~ FFD_std+n_fl_std, data = data_sel))
summary(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel))
Anova(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel))
summary(lmer(n_intact_seeds_rel ~ (FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2))*year+(1|id), data = data_sel))
Anova(lmer(n_intact_seeds_rel ~ (FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2))*year+(1|id), data = data_sel))
summary(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel))
Anova(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel))
step(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel))
summary(lmer(n_intact_seeds_rel ~ FFD_std + n_fl_std + I(n_fl_std^2) + (1|id), data = data_sel))
step(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+year+(1|id), data = data_sel))
summary(lmer(n_intact_seeds_rel ~ FFD_std + n_fl_std + (1 | id) + FFD_std:n_fl_std,data_sel))
step(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+year+(1|id), data = data_sel))
step(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel))
step(lmer(n_intact_seeds_rel ~ FFD_std+n_fl_std+year+(1|id), data = data_sel))
?step
AIV(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel)
)
AIC(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel))
AIC(lmer(n_intact_seeds_rel ~ FFD_std+n_fl_std+I(n_fl_std^2)+(1|id), data = data_sel))
library(MuMIn)
dredge(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel))
summary(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel,REML=F))
dredge1<-dredge(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel,REML=F))
model.avg(dredge1,subset = delta < 2)
model.avg(dredge1,subset = delta < 2)
summary(model.avg(dredge1,subset = delta < 2))
dredge1
dredge1<-dredge(lmer(n_intact_seeds_rel ~ FFD_std+n_fl_std+year+(1|id), data = data_sel,REML=F))
dredge1<-dredge(lmer(n_intact_seeds_rel ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel,REML=F))
dredge2<-dredge(lmer(n_intact_seeds_rel ~ FFD_std+n_fl_std+year+(1|id), data = data_sel,REML=F))
summary(model.avg(dredge2,subset = delta < 2))
dredge2
summary(lmer(n_intact_seeds ~ FFD*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel,REML=F))
Anova(lmer(n_intact_seeds ~ FFD*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel,REML=F))
Anova(lmer(n_intact_seeds ~ FFD*n_fl+I(FFD^2)+I(n_fl^2)+year+(1|id), data = data_sel,REML=F))
summary(lmer(n_intact_seeds ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel,REML=F))
Anova(lmer(n_intact_seeds ~ FFD_std*n_fl_std+I(FFD_std^2)+I(n_fl_std^2)+year+(1|id), data = data_sel,REML=F))
summary(model.avg(dredge1,subset = delta < 2))
dredge2 #Only one with delta<2
summary(lm(selgradFFD~grazing+prop_pred_seeds+seeds_per_fl+precipitation_3,data=data_sel_agg)) #NS
#Drivers
step(lm(selgradFFD~grazing+prop_pred_seeds+seeds_per_fl+precipitation_3,data=data_sel_agg)) #NS
#Drivers
step(lm(selgradFFD~grazing+prop_pred_seeds+seeds_per_fl+precipitation_3,data=data_sel_agg)) #NS
summary(lm(formula = selgradFFD ~ grazing + seeds_per_fl, data = data_sel_agg))
summary(lm(formula = selgradFFD ~ grazing, data = data_sel_agg))
summary(lm(formula = selgradFFD ~ grazing + seeds_per_fl, data = data_sel_agg))
step(lm(selgradFFD~grazing+prop_pred_seeds+fr_set+seed_set+precipitation_3,data=data_sel_agg)) #NS
summary(lm(formula = selgradFFD ~ grazing + fr_set, data = data_sel_agg))
summary(model.avg(dredge(lm(selgradFFD~grazing+prop_pred_seeds+seeds_per_fl+precipitation_3,data=data_sel_agg)),subset = delta < 2))
summary(model.avg(dredge(lm(selgradFFD~grazing+prop_pred_seeds+seeds_per_fl+precipitation_3,data=data_sel_agg)),subset = delta < 2))
summary(model.avg(dredge(lm(selgradFFD~grazing+prop_pred_seeds+fr_set+seed_set+precipitation_3,data=data_sel_agg)),subset = delta < 2))
?step
?AICc
AIC(lm(selgradFFD~grazing+prop_pred_seeds+fr_set+seed_set+precipitation_3,data=data_sel_agg))
AICc(lm(selgradFFD~grazing+prop_pred_seeds+fr_set+seed_set+precipitation_3,data=data_sel_agg))
step(lm(selgradFFD~grazing+prop_pred_seeds+fr_set+seed_set+precipitation_3,data=data_sel_agg))
?stepAICc
??stepAICc
AIC(lm(selgradFFD~grazing+prop_pred_seeds+seeds_per_fl+precipitation_3,data=data_sel_agg))
AIC(lm(formula = selgradFFD ~ grazing + seeds_per_fl, data = data_sel_agg)) #grazing*
AICc(lm(selgradFFD~grazing+prop_pred_seeds+seeds_per_fl+precipitation_3,data=data_sel_agg))
AICc(lm(formula = selgradFFD ~ grazing + seeds_per_fl, data = data_sel_agg)) #grazing*
summary(lm(formula = selgradFFD ~ grazing + seeds_per_fl, data = data_sel_agg)) #grazing*
summary(lm(formula = selgradFFD ~ grazing + fr_set, data = data_sel_agg)) #grazing*
linear_coefs
summary(randomerror3)
randomerror3 <- MCMCglmm (estimate~year, random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(randomerror3)
randomerror3 <- MCMCglmm (estimate~1, random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10)
summary(randomerror3)
>>> posterior.mode(randomerror3$Sol)
posterior.mode(randomerror3$Sol)
summary(randomerror3)
plot(randomerror3$Sol) # Fixed effects
plot(randomerror3$VCV) # Random effects
plot(mod1$Sol)
cumGDD5+grazing+prop_pred_seeds+n_fl_std+seeds_per_fl - 1,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year ,
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior3,
verbose = FALSE)
prior3<-list(R=list(V=diag(1),nu=0.002), G=list(G1=list(V=diag(1), nu=1, alpha.mu=0, alpha.V=diag(1)*a)))
modelito<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~
cumGDD5+grazing+prop_pred_seeds+n_fl_std+seeds_per_fl - 1,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year ,
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior3,
verbose = FALSE)
prior<-list(G=list(G1=list(V=diag(2), nu=3, alpha.mu=c(0,0), alpha.v=diag(2)*1000)),
R=list(V=diag(1), nu=0.002))
modelito<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~
cumGDD5+grazing+prop_pred_seeds+n_fl_std+seeds_per_fl - 1,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year ,
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior3,
verbose = FALSE)
prior<-list(G=list(G1=list(V=diag(2), nu=3, alpha.mu=c(0,0), alpha.v=diag(2)*1000)),
R=list(V=diag(2), nu=0.002))
modelito<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~
cumGDD5+grazing+prop_pred_seeds+n_fl_std+seeds_per_fl - 1,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year ,
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior3,
verbose = FALSE)
prior<-list(G=list(G1=list(V=diag(2), nu=3, alpha.mu=c(0,0), alpha.v=diag(2)*1000)),
R=list(V=diag(2), nu=3))
modelito<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~
cumGDD5+grazing+prop_pred_seeds+n_fl_std+seeds_per_fl - 1,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year ,
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior3,
verbose = FALSE)
prior<-list(G=list(G1=list(V=diag(2), nu=3, alpha.mu=c(0,0), alpha.v=diag(2)*1000)),
R=list(V=diag(2), nu=3))
mod1<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~
cumGDD5+grazing+prop_pred_seeds+n_fl_std+seeds_per_fl - 1,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year ,
rcov=~us(trait):units, #RESID variance
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior,
verbose = FALSE)
summary(mod1)
summary(lm(formula = selgradFFD ~ grazing + seeds_per_fl, data = data_sel_agg)) #grazing*
linear_coefs
summary(MCMCglmm (estimate~year, random = ~idh(std.error):units,
data = linear_coefs,  prior=prior3, nitt = 100000,burnin = 10000,thin = 10))
summary(randomerror3)
HPDinterval(randomerror3$VCV)
HPDinterval(randomerror3$Sol)
summary(mod1)
mod1<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~ trait-1+trait:cumGDD5+trait:n_fl,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year ,
rcov=~us(trait):units, #RESID variance
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior,
verbose = FALSE)
summary(mod1)
plot(mod1$Sol)
plot(mod1$Sol)
plot(mod1$Sol)
plot(mod1$VCV)
summary(mod1)
mod1<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~ trait-1+trait:cumGDD5+trait:n_fl,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year+us(trait):id ,
rcov=~us(trait):units, #RESID variance
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior,
verbose = FALSE)
prior<-list(G=list(G1=list(V=diag(2), nu=3, alpha.mu=c(0,0), alpha.v=diag(2)*1000),
G1=list(V=diag(2), nu=3, alpha.mu=c(0,0), alpha.v=diag(2)*1000)),
R=list(V=diag(2), nu=3))
mod1<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~ trait-1+trait:cumGDD5+trait:n_fl,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year+us(trait):id ,
rcov=~us(trait):units, #RESID variance
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior,
verbose = FALSE)
summary(mod1)
mod1<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~ trait-1+cumGDD5+n_fl,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year+us(trait):id ,
rcov=~us(trait):units, #RESID variance
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior,
verbose = FALSE)
summary(mod1)
)
plot(mod1$Sol)
plot(mod1$VCV)
posterior.mode(mod1$Sol[, "cumGDD5"])
HPDinterval(mod1$Sol[, "cumGDD5"], 0.95)
mod1<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~
trait-1+cumGDD5+grazing+prop_pred_seeds+n_fl_std+seeds_per_fl,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year+us(trait):id ,
rcov=~us(trait):units, #RESID variance
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior,
verbose = FALSE)
summary(mod1)
mod1<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~
trait+cumGDD5+grazing+prop_pred_seeds+n_fl_std+seeds_per_fl,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year+us(trait):id ,
rcov=~us(trait):units, #RESID variance
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior,
verbose = FALSE)
summary(mod1)
mod1<-MCMCglmm(cbind(FFD_std, round(n_intact_seeds_rel)) ~
trait-1+trait:cumGDD5+trait:grazing+trait:prop_pred_seeds+trait:n_fl_std+trait:seeds_per_fl,
## RANDOM EFFECTS:
## us=unstructured, fits var/trait & covar traits
## us relaxes assumption of independence of groups
## us as both resp.vars measured for same inds
random=~us(trait):year+us(trait):id ,
rcov=~us(trait):units, #RESID variance
family=c("gaussian", "poisson"), #for each resp.var.
data=data_sel,
prior=prior,
verbose = FALSE)
summary(mod1)
mod1$Sol
str(mod1$Sol)
head(mod1$Sol)
cov.a<-mod1$Sol[, "traitn_intact_seeds_rel:cumGDD5"]
var.a.cumGDD5<-mod1$Sol[, "traitFFD_std:cumGDD5"]
BetacumGDD5 <- cov.a/var.a.FFD
BetacumGDD5 <- cov.a/var.a.cumGDD5
BetacumGDD5
hist(BetacumGDD5)
mean(BetacumGDD5)
HPDinterval(BetacumGDD5)
summary(mod1)
rm(cov.a)
rm(var.a.cumGDD5)
rm(BetacumGDD5)
